/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * TransferFailed: 'Could not transfer liquidity to the bid.'
 *
 * @category Errors
 * @category generated
 */
export class TransferFailedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'TransferFailed'
  constructor() {
    super('Could not transfer liquidity to the bid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransferFailedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new TransferFailedError())
createErrorFromNameLookup.set('TransferFailed', () => new TransferFailedError())

/**
 * UnfundedBid: 'The deposit amount is insufficient to cover the rate.'
 *
 * @category Errors
 * @category generated
 */
export class UnfundedBidError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'UnfundedBid'
  constructor() {
    super('The deposit amount is insufficient to cover the rate.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnfundedBidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnfundedBidError())
createErrorFromNameLookup.set('UnfundedBid', () => new UnfundedBidError())

/**
 * BelowMinimumRate: 'Rate defined is below the orderbook secure minimum of 0.6:1'
 *
 * @category Errors
 * @category generated
 */
export class BelowMinimumRateError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'BelowMinimumRate'
  constructor() {
    super('Rate defined is below the orderbook secure minimum of 0.6:1')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BelowMinimumRateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new BelowMinimumRateError())
createErrorFromNameLookup.set(
  'BelowMinimumRate',
  () => new BelowMinimumRateError()
)

/**
 * Unauthorized: 'Signer is not authorised to modify this account.'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Signer is not authorised to modify this account.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * Uncloseable: 'Bid account has stake_accounts, claim the stake accounts - or withdraw the staked sol to close bid.'
 *
 * @category Errors
 * @category generated
 */
export class UncloseableError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'Uncloseable'
  constructor() {
    super(
      'Bid account has stake_accounts, claim the stake accounts - or withdraw the staked sol to close bid.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UncloseableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new UncloseableError())
createErrorFromNameLookup.set('Uncloseable', () => new UncloseableError())

/**
 * InsufficientBids: 'not enough bids to cover the sale of stake accounts.'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientBidsError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InsufficientBids'
  constructor() {
    super('not enough bids to cover the sale of stake accounts.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientBidsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InsufficientBidsError())
createErrorFromNameLookup.set(
  'InsufficientBids',
  () => new InsufficientBidsError()
)

/**
 * PublicKeyCreationFailed: 'Failed to create a public key with the provided seed.'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyCreationFailedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'PublicKeyCreationFailed'
  constructor() {
    super('Failed to create a public key with the provided seed.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicKeyCreationFailedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new PublicKeyCreationFailedError())
createErrorFromNameLookup.set(
  'PublicKeyCreationFailed',
  () => new PublicKeyCreationFailedError()
)

/**
 * StakeAccountLockupNotFound: 'Cannot find Stake Account's lockup.'
 *
 * @category Errors
 * @category generated
 */
export class StakeAccountLockupNotFoundError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'StakeAccountLockupNotFound'
  constructor() {
    super("Cannot find Stake Account's lockup.")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeAccountLockupNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new StakeAccountLockupNotFoundError()
)
createErrorFromNameLookup.set(
  'StakeAccountLockupNotFound',
  () => new StakeAccountLockupNotFoundError()
)

/**
 * StakeAccountAuthorizationNotFound: 'Cannot find Stake Account's authorization settings.'
 *
 * @category Errors
 * @category generated
 */
export class StakeAccountAuthorizationNotFoundError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'StakeAccountAuthorizationNotFound'
  constructor() {
    super("Cannot find Stake Account's authorization settings.")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeAccountAuthorizationNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new StakeAccountAuthorizationNotFoundError()
)
createErrorFromNameLookup.set(
  'StakeAccountAuthorizationNotFound',
  () => new StakeAccountAuthorizationNotFoundError()
)

/**
 * StakeAccountDelegationNotFound: 'Cannot find Stake Account's delegation.'
 *
 * @category Errors
 * @category generated
 */
export class StakeAccountDelegationNotFoundError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'StakeAccountDelegationNotFound'
  constructor() {
    super("Cannot find Stake Account's delegation.")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeAccountDelegationNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new StakeAccountDelegationNotFoundError()
)
createErrorFromNameLookup.set(
  'StakeAccountDelegationNotFound',
  () => new StakeAccountDelegationNotFoundError()
)

/**
 * StakeNotActivated: 'Stake is not yet activated.'
 *
 * @category Errors
 * @category generated
 */
export class StakeNotActivatedError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'StakeNotActivated'
  constructor() {
    super('Stake is not yet activated.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeNotActivatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new StakeNotActivatedError())
createErrorFromNameLookup.set(
  'StakeNotActivated',
  () => new StakeNotActivatedError()
)

/**
 * InvalidRemainingAccountsSchema: 'Provided schema of RemainingAccounts is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRemainingAccountsSchemaError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidRemainingAccountsSchema'
  constructor() {
    super('Provided schema of RemainingAccounts is invalid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRemainingAccountsSchemaError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177b,
  () => new InvalidRemainingAccountsSchemaError()
)
createErrorFromNameLookup.set(
  'InvalidRemainingAccountsSchema',
  () => new InvalidRemainingAccountsSchemaError()
)

/**
 * FillOverflow: 'Failed to partially fill the bid. Numerical overflow occurred.'
 *
 * @category Errors
 * @category generated
 */
export class FillOverflowError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'FillOverflow'
  constructor() {
    super('Failed to partially fill the bid. Numerical overflow occurred.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FillOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new FillOverflowError())
createErrorFromNameLookup.set('FillOverflow', () => new FillOverflowError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
